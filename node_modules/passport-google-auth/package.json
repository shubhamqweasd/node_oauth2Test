{
  "name": "passport-google-auth",
  "version": "1.0.0",
  "description": "Google (OAuth2) authentication strategy for Passport and Node.js.",
  "keywords": [
    "passport",
    "google",
    "auth",
    "authn",
    "authentication",
    "identity"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/RiptideCloud/passport-google-auth.git"
  },
  "bugs": {
    "url": "http://github.com/RiptideCloud/passport-google-auth/issues"
  },
  "author": {
    "name": "David Pate",
    "email": "me@davidtpate.com",
    "url": "http://davidtpate.com"
  },
  "contributors": [
    {
      "name": "Lovell Fuller",
      "email": "npm@lovell.info",
      "url": "http://lovell.info"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "index.js",
  "dependencies": {
    "passport-strategy": "1.x",
    "googleapis": "^1.x"
  },
  "devDependencies": {
    "buddy.js": "^0.x",
    "istanbul": "^0.x",
    "mocha": "^2.x",
    "nsp": "^1.x",
    "jscs": "^1.x",
    "jshint": "^2.x",
    "jsinspect": "^0.x",
    "should": "^4.x"
  },
  "scripts": {
    "test": "node ./node_modules/istanbul/lib/cli.js cover node_modules/mocha/bin/_mocha -- --check-leaks  --timeout 60000 --reporter spec test/ && node ./node_modules/jshint/bin/jshint --show-non-errors . && node ./node_modules/jscs/bin/jscs . && node ./node_modules/buddy.js/bin/buddy index.js lib test && node ./node_modules/nsp/bin/nspCLI.js audit-package"
  },
  "readme": "# Passport-Google-Auth\n[![npm](https://img.shields.io/npm/v/passport-google-auth.svg)](https://www.npmjs.com/package/passport-google-auth)\n[![Downloads](https://img.shields.io/npm/dm/passport-google-auth.svg)](https://www.npmjs.com/package/passport-google-auth)\n[![Build Status](https://travis-ci.org/RiptideCloud/passport-google-auth.svg?branch=master)](https://travis-ci.org/RiptideCloud/passport-google-auth)\n[![Coverage Status](https://img.shields.io/coveralls/RiptideCloud/passport-google-auth.svg?branch=master)](https://coveralls.io/r/RiptideCloud/passport-google-auth)\n[![Codacy](https://www.codacy.com/project/badge/d30a71223ecc45878ccfd94e04276414)](https://www.codacy.com/public/davidtpate/passport-google-auth)\n[![Code Climate](https://codeclimate.com/github/RiptideCloud/passport-google-auth/badges/gpa.svg)](https://codeclimate.com/github/RiptideCloud/passport-google-auth)\n[![David](https://img.shields.io/david/RiptideCloud/passport-google-auth.svg)](https://david-dm.org/RiptideCloud/passport-google-auth)\n[![David](https://img.shields.io/david/dev/RiptideCloud/passport-google-auth.svg)](https://david-dm.org/RiptideCloud/passport-google-auth)\n[![David](https://img.shields.io/david/peer/RiptideCloud/passport-google-auth.svg)](https://david-dm.org/RiptideCloud/passport-google-auth)\n\n[Passport](http://passportjs.org/) strategies for authenticating with [Google](http://www.google.com/)\nusing OAuth 2.0.\n\nThis module lets you authenticate using Google in your Node.js applications.\nBy plugging into Passport, Google authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n```bash\nnpm install passport-google-auth\n```\n\n## Usage\n\n### Configure Strategy\n\nThe Google authentication strategy authenticates users using a Google\naccount and OAuth 2.0 tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as\n`options` specifying a client ID, client secret, and callback URL.\n\n```js\nvar passport = require('passport'),\n    GoogleStrategy = require('passport-google-auth').Strategy;\n\npassport.use(new GoogleOAuth2Strategy({\n    clientId: '123-456-789',\n    clientSecret: 'shhh-its-a-secret',\n    callbackURL: 'https://www.example.com/auth/example/callback'\n  },\n  function(accessToken, refreshToken, profile, done) {\n    User.findOrCreate(..., function (err, user) {\n      done(err, user);\n    });\n  }\n));\n```\n\nIf the `passReqToCallback` options is passed and it is true, then the `verify` callback signature\nwill look like the following instead.\n\n```js\nvar passport = require('passport'),\n    GoogleStrategy = require('passport-google-auth').Strategy;\n\npassport.use(new GoogleOAuth2Strategy({\n    clientId: '123-456-789',\n    clientSecret: 'shhh-its-a-secret',\n    callbackURL: 'https://www.example.com/auth/example/callback'\n  },\n  function(req, accessToken, refreshToken, profile, done) {\n    User.findOrCreate(..., function (err, user) {\n      done(err, user);\n    });\n  }\n));\n```\n\n#### Options\nThe `Strategy` can be configured with the following options.\n\n* `clientId`          `String` identifies the client to the service provider **Required**\n* `clientSecret`      `String` secret used to establish ownershup of the client identifier **Required**\n* `callbackURL`       `String` URL to which the service provider will redirect the user after obtaining authorization. **Required**\n* `accessType`        `String` Type of access to be requested from the service provider. Can be `online` (default) or `offline` (gets refresh_token) _Optional_\n* `scope`             `String` or `Array` representing the permission scopes to request access to. (default: `https://www.googleapis.com/auth/userinfo.email`) _Optional_\n* `skipUserProfile`   `Boolean` If set to false, profile information will be retrieved from Google+. (default: `true`) _Optional_\n* `passReqToCallback` `Boolean` When `true`, `req` is the first argument to the verify callback (default: `false`)\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'google'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n```js\nvar express = require('express'),\n    app = express();\n\napp.get('/login', passport.authenticate('google'));\n\napp.get('/auth/callback/google', \n    passport.authenticate('google', { failureRedirect: '/login' }),\n    function(req, res) {\n        // Successful authentication, redirect to your app.\n        res.redirect('/');\n    }\n);\n```\n\n## Testing\nThis repository uses [Mocha](http://mochajs.org/) as its test runner. Tests can be run by executing the following command:\n\n```bash\nnpm test\n```\n\nThis will run all tests and report on their success/failure in the console, additionally it will include our [Code Coverage](#code-coverage).\n\n## Code Coverage\nThis repository uses [Istanbul](http://gotwarlost.github.io/istanbul/) as its code coverage tool. Code Coverage will be calculated when executing the following command:\n\n```bash\nnpm test\n```\n\nThis will report the Code Coverage to the console similar to the following:\n\n```bash\n=============================== Coverage summary ===============================\nStatements   : 78.07% ( 356/456 )\nBranches     : 50.23% ( 107/213 )\nFunctions    : 74.77% ( 83/111 )\nLines        : 78.07% ( 356/456 )\n================================================================================\n```\n\nAdditionally, an interactive HTML report will be generated in `./coverage/lcov-report/index.html` which allows browsing the coverage by file.\n\n## Code Style\nThis repository uses [JSHint](https://github.com/jshint/jshint) for static analysis, [JavaScript Code Style](https://github.com/jscs-dev/node-jscs)\nfor validating code style, [JSInspect](https://github.com/danielstjules/jsinspect) to detect code duplication, [Buddy.js](https://github.com/danielstjules/buddy.js)\nto detect the use of [Magic Numbers](http://en.wikipedia.org/wiki/Magic_number_(programming)), and\n[Node Security Project](https://github.com/nodesecurity/nsp) for detecting potential security threats with our dependencies. Code inspections are run as part of\nstandard testing, to re-evaluate them simply run:\n\n```bash\nnpm test\n```\n\n## License\n\n[MIT](LICENSE)\n\n## Copyright\n> Copyright (c) 2014 Riptide Software Inc.",
  "readmeFilename": "README.md",
  "_id": "passport-google-auth@1.0.0",
  "dist": {
    "shasum": "aff5defbf10f055c1ff1f95f0c7354c88ffad4ef"
  },
  "_from": "passport-google-auth@",
  "_resolved": "https://registry.npmjs.org/passport-google-auth/-/passport-google-auth-1.0.0.tgz"
}
